You are given a rectangular binary matrix (contains only zeros and ones) of R rows and C columns. 
Print the number of different regions in the given matrix. A separate region is a collection of 
ones interconnected horizontally or vertically. A region can have holes in it.

![Capture](https://github.com/MBhargavi235/Python-Nextwave/assets/106804698/35b0f32d-8673-4cf0-ba92-6e7f7141fbe0)

In the above image, different regions in the matrix are represented by different colors.

Input:

The first line of input contains two space-separated integers, R and C
The next R lines contain C space-separated integers.

Output:

The first line of output is an integer.

Explanation:

Give R = 6 and C = 10
and the matrix

1 1 1 1 0 1 1 0 1 1
1 0 0 0 0 0 0 1 1 1
1 0 1 1 0 0 0 1 0 1
1 0 1 1 0 1 0 1 1 1
0 0 0 0 0 1 1 0 0 1
0 0 0 0 1 1 1 0 1 0

Different regions of this matrix are highlighted with different colors in the above image.

As a region is a collection of ones interconnected horizontally or vertically, but not diagonally, the regions green, yellow, purple, red are not considered as single region as highlighted in the above image.

Also, notice that the yellow region has a hole in it.

As it can be observed from the image, there are a total of 6 regions (blue, green, yellow, purple, red, pink).

So the output is 6.

Sample Input 1:

6 10
1 1 1 1 0 1 1 0 1 1
1 0 0 0 0 0 0 1 1 1
1 0 1 1 0 0 0 1 0 1
1 0 1 1 0 1 0 1 1 1
0 0 0 0 0 1 1 0 0 1
0 0 0 0 1 1 1 0 1 0

Output:

6

Sample Input 2:

5 5
1 1 1 1 0
0 1 1 0 1
0 1 1 1 0
1 0 0 1 1
1 1 1 1 1

Output:

2

Solution:


def read_matrix(rows, columns):
    matrix = []
    for i in range(rows):
        row = list(map(int, input().split()))
        matrix.append(row)
    return matrix
    
def get_ones_list(matrix):
    ones_list = []
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == 1:
                ones_list.append((i, j))
    return ones_list

def get_neighbours(pos):
    i, j = pos
    neighbours = []
    neighbours.append((i, j-1))
    neighbours.append((i, j+1))
    neighbours.append((i-1, j))
    neighbours.append((i+1, j))
    return neighbours
    
def get_connected_ones(region, ones_list):
    connected_ones = []
    for position in region:
        neighbours = get_neighbours(position)
        for each_neighbour in neighbours:
            if (each_neighbour in ones_list) and (each_neighbour not in region):
                connected_ones.append(each_neighbour)
                ones_list.remove(each_neighbour)
    return connected_ones
    
def get_no_of_regions(matrix):
    ones_list = get_ones_list(matrix)
    no_of_regions = 0
    while len(ones_list) != 0:
        start = ones_list.pop()
        region = [start]
        while True:
            connected_ones = get_connected_ones(region, ones_list)
            if(len(connected_ones) == 0):
                break
            region.extend(connected_ones)
        no_of_regions += 1
    return no_of_regions
    
def main():
    rows, columns = map(int, input().split())
    matrix = read_matrix(rows, columns)
    no_of_regions = get_no_of_regions(matrix)
    print(no_of_regions)

main()
