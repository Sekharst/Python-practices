01. Secret Message - 1

Given a string, write a program to mirror the characters of the string in alphabetical order to create a secret message.
Note: Mirroring the characters in alphabetical order replacing the letters 'a' with 'z', 'b' with 'y', ... , 'z' with 'a'. 
You need to mirror both uppercase and lowercase characters. You can ignore mirroring for all characters that are not letters.

ï»¿
a b c d e f g h i j k l m n o p q r s t u v w x y z
z y x w v u t s r q p o n m l k j i h g f e d c b a

Input:

The input will be a string in the single line containing spaces and letters (both uppercase and lowercase).

Output:

The output should be a single line containing the secret message. All characters in the output should be in lower case.

Explanation:

For example, if the given input is "python", "p" should replaced with "k", similarly "y" with "b", "t" with "g", "h" with "s", 
"o" with "l", "n" with "m". So the output should be "kbgslm".


Sample Input 1:

python

Sample Output 1:

kbgslm

Sample Input 2:

Foundations

Sample Output 2:

ulfmwzgrlmh


Solution:

string = input()
lower_string = string.lower()
#print(lower_string)

alpha_dict = {'a':'z', 'b':'y', 'c':'x', 'd':'w', 'e':'v', 'f':'u', 'g':'t', 'h':'s', 'i':'r', 
                'j':'q', 'k':'p', 'l':'o', 'm':'n', 'n':'m', 'o':'l', 'p':'k', 'q':'j', 'r':'i', 
                's':'h', 't':'g', 'u':'f', 'v':'e', 'w':'d', 'x':'c', 'y':'b', 'z':'a',' ':' '}

s=""
for i in lower_string:
    if i in alpha_dict.keys():
        s=s+alpha_dict[i] 
print(s)

_______________________________________________________________________________________________________________

02. Secret Message - 2

Given a string, write a program to print a secret message that replaces characters with numbers 'a' with 1, 
'b' with 2, ..., 'z' with 26 where characters are separated by '-'.

Note: You need to replace both uppercase and lowercase characters. You can ignore replacing all 
characters that are not letters.

a b c d e f g h i j  k  l  m  n  o   p  q  r  s  t  u  v  w  x  y  z
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  19 20 21 22 23 24 25 26

Input:

The input will be a string in the single line containing spaces and letters (both uppercase and lowercase).

Output:

The output should be a single line containing the secret message. All characters in the output should be in lower case.

Explanation:

For example, if the given input is "python", "p" should replaced with "16", similarly"y" with "25","t" with "20",
"h" with "8","o" with "15","n" with "14". So the output should be "16-25-20-8-15-14".

Sample Input 1:

python

Sample Output 1:

16-25-20-8-15-14

Sample Input 2:

Foundations

Sample Output 2:

6-15-21-14-4-1-20-9-15-14-19

Solution:

alpha_dict = {'a':'1', 'b':'2', 'c':'3', 'd':'4', 'e':'5', 'f':'6', 'g':'7', 'h':'8', 'i':'9', 
                'j':'10', 'k':'11', 'l':'12', 'm':'13', 'n':'14', 'o':'15', 'p':'16', 'q':'17', 'r':'18', 
                's':'19', 't':'20', 'u':'21', 'v':'22', 'w':'23', 'x':'24', 'y':'25', 'z':'6',' ':' '}
lowera=input().lower()
s=""
for i in lowera:
    if i in alpha_dict.keys():
        s=s+alpha_dict[i]+"-"
b=s.split()
if(len(b)>1):
    for i in b:
        if i[0]=="-" and i[-1]=="-":
            c=i[1:-1]
        elif i[-1]=="-":
            d=i[:-1]
    e=d+" "+c
    print(e)
else:
    for i in b:
        print(i[:-1])

___________________________________________________________________________________________________________

03. Weekend

Given two dates D1 and D2, write a program to count the number of Saturdays and Sundays 
from D1 to  D2 (including D1 and D2).
The date in string format is like "8 Feb 2021".

Input:

The first line of input will contain date D1 in the string format.
The second line of input will contain date D2 in the string format.

Output:

The output should be a single line containing two integers separated by space.

Explanation:

For example, if the given dates are "25 Jan 2021" and "14 Feb 2021", the Saturdays
and Sundays dates from "25 Jan 2021" to "14 Feb 2021" are 

"30 Jan 2021" is a Saturday"
"31 Jan 2021" is a Sunday"
"6 Feb 2021" is a Saturday"
"7 Feb 2021" is a Sunday"
"13 Feb 2021" is a Saturday"
"14 Feb 2021" is a Sunday"

So the output should be 

Saturday: 3
Sunday: 3

Sample Input 1:

25 Jan 2021
14 Feb 2021

Sample Output 1:

Saturday: 3
Sunday: 3

Sample Input 2:

25 May 2019
22 Dec 2021

Sample Output 2:

Saturday: 135
Sunday: 135

Solution:

import datetime
date_start_str = input()
date_end_str = input()
# convert string to date format 
date_start = datetime.datetime.strptime(date_start_str, '%d %b %Y')
date_end = datetime.datetime.strptime(date_end_str, '%d %b %Y')
# initialization of the initial number of weekends
day = datetime.timedelta(days=1)
count_saturday = 0
count_sunday = 0
# iteration over all dates in the range
while date_start <= date_end:
    if date_start.isoweekday() == 6:
        count_saturday += 1
    if date_start.isoweekday() == 7:
        count_sunday += 1
    date_start += day
# output a single line containing two space-separated integers
print("Saturday:", count_saturday)
print("Sunday:",count_sunday)

_____________________________________________________________________________________________________

04. New Year Countdown

Given date-time D, write a program to print the time left for the next New Year.

Input:

The input will be a single line containing the date-time in the string format similar to "Dec 30 2020 02:43 PM".

Output:

The output should be a single line containing hours and minutes left for the next new year in the format 
similar to "33 hours 17 minutes".

Explanation:

For example, if the given date-time is "Dec 30 2020 02:43 PM", the difference between "Dec 30 2020 02:43 PM" 
and "Jan 1 2021 00:00 AM" is 1 day 9 hours 17 minutes. The difference in hours and minutes is  1 * 24 + 9 hours 
and 17 minutes. So the output should be "33 hours 17 minutes".

Sample Input 1:

Dec 30 2020 02:43 PM

Sample Output 1:

33 hours 17 minutes

Sample Input 2:

Jan 31 2020 04:43 AM

Sample Output 2:

8059 hours 17 minutes


Solution:

month_day = [['Jan',31], ['Feb',28], ['Mar',31], ['Apr',30], ['May',31],
['Jun',30],['Jul',31], ['Aug',31],['Sep',30], ['Oct',31],['Nov',30],['Dec',31]]
# enter string of user
mon, day, year, time, am_pm = input().split()
# leap year check
y = int(year)
if y % 4 != 0 or (y % 100 == 0 and y % 400 != 0):
    month_day[1][1] =28
else:
    month_day[1][1] =29
# get full day 
day, after = int(day), 0
for item in month_day:
    day += item[1] * after
    if item[0] == mon:
        day = item[1]- day
        after = 1
# detect hours and minutes 
hour, min = time.split(':')
if int(min) != 0:
    min = 60 - int(min)
else:
    min = 0
if am_pm == 'PM':
    hour = 12 -int(hour)
if am_pm == 'AM':
    hour = 24 -int(hour)
if min !=0:
    hour -= 1
# output result
print(f'{24*day + hour} hours {min} minutes')

___________________________________________________________________________________________________________

05. Smallest Miissing Number

Given a list of numbers, write a program to print the smallest positive integer missing in the given numbers.

Input:

The input will be a single line containing numbers separated by space.

Output:

The output should be a single line containing the smallest missing number from given numbers.

Explanation:

For example, if the input numbers are 3, 1, 2, 5, 3, 7, 7.

The number 1, 2, 3 are present. But the number 4 is not. So 4 is the smallest positive integers 
that is missing from the given numbers.

Sample Input 1:

3 1 2 5 3 7 7

Sample Output 1:

4

Sample Input 2:

5 5 2 3 1 8 8 4

Sample Output 2:

6

Solution:

def convert_string_to_int(lista):
    newlist=[]
    for item in lista:
        num=int(item)
        newlist.append(num)
    return newlist
num_list=input().split()
num_list=convert_string_to_int(num_list)
maximum=max(num_list)
num_set=set(num_list)
first_n_numset=set(range(1,maximum+1))
missing_num_set=first_n_numset.difference(num_set)
missing_num_list=list(missing_num_set)
if missing_num_list==[]:
    print(maximum+1)
else:
    print(min(missing_num_list))


