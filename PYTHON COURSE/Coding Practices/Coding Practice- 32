01. Car

You are given an incomplete Car class

Go through the comments in the prefilled code to implement the Car class with the described attributes and methods.

Points to Note:

1.The output of the testcase "Checking Default Tests" is given by the default_test function in the prefilled code.
2. This Coding question does not have the usual input/output testcases. The class defined by you will be tested 
internally whether the attributes are present or not. So in testcases results you will be shown the rough 
description of the tests that will be verified.
3.You can copy the implementation of Car class from the previous set and add new features on top of that code.

Sample Input:

Checking Default Tests

Sample Output:

Red
250
10
3


Outline

Question: Car
Approach
Step 1: Understand the Car class
Step 2: Define the Car class
Step 3: Implement the init method
Solution

Question: Car
In this coding question, you are given an incomplete Car class. Your task is to implement the Car class
with the described attributes and methods. The attributes are color, max_speed, acceleration, and tyre_friction.

Approach

To solve this problem, we will follow these steps:

Understand the Car class and its attributes.
Define the Car class.
Implement the __init__ method to initialize the attributes.

Step-by-Step Explanation

Step 1: Understand the Car class
Before we start coding, let's understand the Car class and its attributes:

color: The color of the car.
max_speed: The maximum speed the car can reach.
acceleration: The rate at which the car can increase its speed.
tyre_friction: The friction between the car's tires and the road.

Step 2: Define the Car class
Now that we understand the Car class and its attributes, let's define the class in Python:

Step 3: Implement the init method
Inside the Car class, we need to implement the __init__ method to initialize the attributes. 
The __init__ method is a special method in Python classes that is called when an object is created.

In the __init__ method, we take the values of color, max_speed, acceleration, and tyre_friction as arguments
and assign them to the corresponding attributes using self.


Here is the complete solution for the Car class:

Solution

# Car class should have the following attributes & methods

# Attributes:
#   color, max_speed, acceleration, tyre_friction
#


# Implement the Car class appropriately
class Car:
    def __init__(self,color,max_speed,acceleration,tyre_friction):
        self.color=color
        self.max_speed=max_speed
        self.acceleration=acceleration
        self.tyre_friction=tyre_friction
# You need not change any code below.
# Do not call this function anywhere. It will automatically be called internally during tests.
def default_test():
    car = Car(color="Red", max_speed=250, acceleration=10, tyre_friction=3)
    print(car.color)
    print(car.max_speed)
    print(car.acceleration)
    print(car.tyre_friction)

_____________________________________________________________________________________________________________________

02. Car-2

You are given an incomplete Car class

Go through the comments in the prefilled code to implement the Car class with the described attributes and methods.

Points to Note:

1.The output of the testcase "Checking Default Tests" is given by the default_test function in the prefilled code.
2. This Coding question does not have the usual input/output testcases. The class defined by you will be tested 
internally whether the attributes are present or not. So in testcases results you will be shown the rough 
description of the tests that will be verified.
3.You can copy the implementation of Car class from the previous set and add new features on top of that code.

Sample Input:

Checking Default Tests

Sample Output:

False
True
False


Outline

Question: Car - 2
Approach
Step 1: Define the Car class
Step 2: Initialize the Car class attributes
Step 3: Implement the startengine and stopengine methods
Solution

Question: Car - 2
In this coding question, you are given an incomplete Car class. Your task is to implement the Car class
with the described attributes and methods. The class should have the following attributes: color, max_speed, 
acceleration, tyre_friction, and is_engine_started. The class should also have the following methods: 
start_engine() and stop_engine().

Approach
To solve this problem, we will follow these steps:

Define the Car class.
Initialize the Car class attributes in the __init__ method.
Implement the start_engine() and stop_engine() methods.

Step-by-Step Explanation

Step 1: Define the Car class
First, we need to define the Car class. This is done by using the class keyword followed by the class name Car and a colon.

Step 2: Initialize the Car class attributes
Next, we need to initialize the Car class attributes. We do this by defining the __init__ method inside 
the Car class. The __init__ method takes the following parameters: self, color, max_speed, acceleration, 
and tyre_friction. Inside the __init__ method, we assign the values of these parameters to the corresponding 
attributes of the Car class.

Step 3: Implement the startengine and stopengine methods
Now, we need to implement the start_engine() and stop_engine() methods. These methods are responsible 
for starting and stopping the car's engine, respectively. To do this, we define the start_engine() method
inside the Car class and set the is_engine_started attribute to True. Similarly, we define the stop_engine() 
method and set the is_engine_started attribute to False.

Here is the complete solution for the Car class:

Solution

# Car class should have the following attributes & methods

# Attributes:
#   color, max_speed, acceleration, tyre_friction
#


# Implement the Car class appropriately
class Car:
    def __init__(self,color,max_speed,acceleration,tyre_friction):
        self.color=color
        self.max_speed=max_speed
        self.acceleration=acceleration
        self.tyre_friction=tyre_friction
        self.is_engine_started=False
# You need not change any code below.
# Do not call this function anywhere. It will automatically be called internally during tests.
    def start_engine(self):
        self.is_engine_started=True
    def stop_engine(self):
        self.is_engine_started=False
def default_test():
    car = Car(color="Red", max_speed=250, acceleration=10, tyre_friction=3)
    print(car.is_engine_started)
    car.start_engine()
    print(car.is_engine_started)
    car.stop_engine()
    print(car.is_engine_started)

________________________________________________________________________________________________________________

03. Car-3

You are given an incomplete Car class

Go through the comments in the prefilled code to implement the Car class with the described attributes and methods.

Points to Note:

1.The output of the testcase "Checking Default Tests" is given by the default_test function in the prefilled code.
2. This Coding question does not have the usual input/output testcases. The class defined by you will be tested 
internally whether the attributes are present or not. So in testcases results you will be shown the rough 
description of the tests that will be verified.
3.You can copy the implementation of Car class from the previous set and add new features on top of that code.

Sample Input:

Checking Default Tests

Sample Output:

Car has not started yet
0
0
10
20
50
50


Outline

Question: Car - 3

Approach
Step 1: Define the Car class and its attributes
Step 2: Implement the startengine and stopengine methods
Step 3: Implement the accelerate method
Solution

Question: Car - 3
In this coding question, you are given an incomplete Car class. Your task is to implement the Car class 
with the described attributes and methods. The class should have the following attributes: color, max_speed, 
acceleration, tyre_friction, is_engine_started, and current_speed. You also need to implement the 
following methods: start_engine, stop_engine, and accelerate.

Approach

To solve this problem, we will follow these steps:

Define the Car class and its attributes.
Implement the start_engine and stop_engine methods.
Implement the accelerate method.

Step-by-Step Explanation

Step 1: Define the Car class and its attributes
First, let's define the Car class and its attributes. We will initialize the attributes in the __init__ method.

In the above code, we have defined the Car class and its attributes. The __init__ method takes color, 
max_speed, acceleration, and tyre_friction as input arguments and initializes the corresponding attributes. 
We also initialize is_engine_started to False and current_speed to 0.

Step 2: Implement the startengine and stopengine methods
Now, let's implement the start_engine and stop_engine methods. These methods will set the is_engine_started 
attribute to True and False, respectively.

In the above code, we have defined the start_engine and stop_engine methods. The start_engine method sets 
the is_engine_started attribute to True, and the stop_engine method sets it to False.

Step 3: Implement the accelerate method
Finally, let's implement the accelerate method. This method will increase the current_speed attribute 
by the acceleration value if the engine is started. If the engine is not started, it will print a message 
"Car has not started yet".

In the above code, we have defined the accelerate method. The method first checks if the engine is started
by checking the is_engine_started attribute. If the engine is not started, it prints a message 
"Car has not started yet". If the engine is started, it increases the current_speed attribute by the 
acceleration value. If the current_speed becomes greater than the max_speed, it sets the current_speed to the max_speed.

Here is the complete solution for the given problem:

This solution defines the Car class with the required attributes and methods. It implements the 
start_engine, stop_engine, and accelerate methods as described in the problem statement.

Solution:

# Car class should have the following attributes & methods

# Old Attributes:
#   color, max_speed, acceleration, tyre_friction, is_engine_started
# New Attributes:
#   current_speed
#
# Old Methods:
#   start_engine, stop_engine
#
# New Methods
#   accelerate:
#       - When this method is called when the car engine is off,
#       the current_speed of the car should not increase
#       - When this method is called when the car engine is on,
#       the current_speed of the car should increase according its acceleration value
#       - Print the message "Car has not started yet" if the car engine is off
#       - Any car cannot accelerate more than its max_speed
#
# When a new car is created, the engine should be off by default and current_speed should be 0


# Implement the Car class appropriately
class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color=color
        self.max_speed=max_speed
        self.acceleration=acceleration
        self.tyre_friction=tyre_friction
        self.is_engine_started=False
        self.current_speed=0

    def start_engine(self):
        self.is_engine_started=True

    def stop_engine(self):
        self.is_engine_started=False

    def accelerate(self):
        if not self.is_engine_started:
            print("Car has not started yet")
        else:
            self.current_speed+=self.acceleration
            if self.current_speed>self.max_speed:
                self.current_speed=self.max_speed
# You need not change any code below.
# Do not call this function anywhere. It will automatically be called internally during tests.
def default_test():
    car = Car(color="Red", max_speed=50, acceleration=10, tyre_friction=3)
    car.accelerate()  # Calling the accelerate method when the is_engine_started is False
    # The above line will print "Car has not started yet"
    print(car.current_speed)
    car.start_engine()  # Starting the car engine
    print(car.current_speed)  # Car engine is started but not yet accelerated => 0
    car.accelerate()  # Calling the accelerate method when the is_engine_started is True
    print(car.current_speed)  # current_speed value has increased by acceleration value (0 + 10 => 10)
    car.accelerate()
    print(car.current_speed)  # current_speed value is 10 and increasing again by acceleration value (10 + 10 => 20)
    car.accelerate()
    car.accelerate()
    car.accelerate()
    print(car.current_speed)
    car.accelerate()  # Accelerating the car more than its max_speed
    print(car.current_speed)  # Any car cannot accelerate more than its max_speed => 50

__________________________________________________________________________________________________________________

04. Car-4

You are given an incomplete Car class

Go through the comments in the prefilled code to implement the Car class with the described attributes and methods.

Points to Note:

1.The output of the testcase "Checking Default Tests" is given by the default_test function in the prefilled code.
2. This Coding question does not have the usual input/output testcases. The class defined by you will be tested 
internally whether the attributes are present or not. So in testcases results you will be shown the rough 
description of the tests that will be verified.
3.You can copy the implementation of Car class from the previous set and add new features on top of that code.

Sample Input:

Checking Default Tests

Sample Output:

10
7
4
1
0


Outline

Question: Car - 4

Approach
Step 1: Define the Car class and its attributes
Step 2: Implement the startengine and stopengine methods
Step 3: Implement the accelerate method
Step 4: Implement the apply_brakes method
Solution

Question: Car - 4

In this coding question, you are given an incomplete Car class. Your task is to implement the Car class 
with the described attributes and methods. The class should have the following attributes: color, max_speed, 
acceleration, tyre_friction, is_engine_started, and current_speed. The class should also have the 
following methods: start_engine, stop_engine, accelerate, and apply_brakes.

Approach

To solve this problem, we will follow these steps:

Define the Car class and its attributes.
Implement the start_engine and stop_engine methods.
Implement the accelerate method.
Implement the apply_brakes method.

Step-by-Step Explanation

Step 1: Define the Car class and its attributes
First, let's define the Car class and its attributes. We will create a constructor method __init__ that takes 
the following parameters: color, max_speed, acceleration, and tyre_friction. Inside the constructor, we will 
initialize the attributes with the given values. We will also initialize the is_engine_started attribute to 
False and the current_speed attribute to 0.

Step 2: Implement the startengine and stopengine methods
Now, let's implement the start_engine and stop_engine methods. These methods will set the is_engine_started 
attribute to True and False, respectively.

Step 3: Implement the accelerate method
Next, we will implement the accelerate method. This method will check if the engine is started or not. 
If the engine is not started, it will print a message "Car has not started yet". If the engine is started,
it will increase the current_speed by the acceleration value. If the current_speed becomes greater than 
the max_speed, we will set the current_speed to the max_speed.

Step 4: Implement the apply_brakes method
Finally, we will implement the apply_brakes method. This method will decrease the current_speed by the 
tyre_friction value. If the current_speed becomes less than 0, we will set the current_speed to 0.

Here is the complete solution for the Car class:

Solution:

# Car class should have the following attributes & methods
#
# Old Attributes:
#   color, max_speed, acceleration, tyre_friction, is_engine_started, current_speed
#
# Old Methods:
#   start_engine, stop_engine, accelerate
# 
# New Methods
#   apply_brakes:
#       - decrease the current_speed value according to the tyre_friction value
#       - current_speed should never go below 0
#
# When a new car is created, the engine should be off by default and current_speed should be 0


# Implement the Car class appropriately
class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color=color
        self.max_speed=max_speed
        self.acceleration=acceleration
        self.tyre_friction=tyre_friction
        self.is_engine_started=False
        self.current_speed=0

    def start_engine(self):
        self.is_engine_started=True

    def stop_engine(self):
        self.is_engine_started=False

    def accelerate(self):
        if not self.is_engine_started:
            print("Car has not started yet")
        else:
            self.current_speed+=self.acceleration
            if self.current_speed>self.max_speed:
                self.current_speed=self.max_speed

    def apply_brakes(self):
        self.current_speed-=self.tyre_friction
        if self.current_speed<0:
            self.current_speed=0


# You need not change any code below.
# Do not call this function anywhere. It will automatically be called internally during tests.
def default_test():
    car = Car(color="Red", max_speed=250, acceleration=10, tyre_friction=3)
    car.start_engine()
    car.accelerate()  # Calling the accelerate method when the is_engine_started is True
    print(car.current_speed)  # 10
    car.apply_brakes()  # Calling the apply_brakes method
    # current_speed of the car should decrease according to the tyre_friction value.
    print(car.current_speed)   # (10 - 3 => 7)
    car.apply_brakes()
    print(car.current_speed)  # 7 - 3 => 4
    car.apply_brakes()
    print(car.current_speed)  # 4 - 3 => 1
    car.apply_brakes()
    print(car.current_speed)  # 1 - 3 => 0 (current_speed should never go behind 0.)

______________________________________________________________________________________________________________________

05. Car-5

You are given an incomplete Car class

Go through the comments in the prefilled code to implement the Car class with the described attributes and methods.

Points to Note:

1.The output of the testcase "Checking Default Tests" is given by the default_test function in the prefilled code.
2. This Coding question does not have the usual input/output testcases. The class defined by you will be tested 
internally whether the attributes are present or not. So in testcases results you will be shown the rough 
description of the tests that will be verified.
3.You can copy the implementation of Car class from the previous set and add new features on top of that code.

Sample Input:

Checking Default Tests

Sample Output:

Car has not started yet
Beep Beep


Outline

Question: Car - 5

Approach
Step 1: Define the Car class and its attributes
Step 2: Implement the startengine and stopengine methods
Step 3: Implement the accelerate and apply_brakes methods
Step 4: Implement the sound_horn method
Solution

Question: Car - 5
In this coding question, you are given an incomplete Car class. Your task is to implement the Car class 
with the described attributes and methods. The class should have the following attributes: color, max_speed, 
acceleration, tyre_friction, is_engine_started, and current_speed. It should also have the 
following methods: start_engine, stop_engine, accelerate, apply_brakes, and sound_horn.

Approach

To solve this coding question, we will follow these steps:

Define the Car class and its attributes.
Implement the start_engine and stop_engine methods.
Implement the accelerate and apply_brakes methods.
Implement the sound_horn method.

Step-by-Step Explanation

Step 1: Define the Car class and its attributes
First, let's define the Car class and its attributes. We will create a constructor method __init__ that 
takes the following parameters: color, max_speed, acceleration, and tyre_friction. Inside the constructor, 
we will initialize the attributes with the given values. We will also initialize the is_engine_started 
attribute as False and the current_speed attribute as 0.

Step 2: Implement the startengine and stopengine methods
Now, let's implement the start_engine and stop_engine methods. The start_engine method should set the 
is_engine_started attribute to True, and the stop_engine method should set the is_engine_started attribute to False.

Step 3: Implement the accelerate and apply_brakes methods
Next, let's implement the accelerate and apply_brakes methods. The accelerate method should check 
if the engine is started. If not, it should print a message "Car has not started yet". If the engine 
is started, it should increase the current_speed attribute by the acceleration value.

The apply_brakes method should decrease the current_speed attribute by the tyre_friction value. 
If the current_speed becomes negative, it should be set to 0.

Step 4: Implement the sound_horn method
Finally, let's implement the sound_horn method. This method should check if the engine is started. If not, 
it should print a message "Car has not started yet". If the engine is started, it should print "Beep Beep".

Here is the complete solution for the Car class:

Solution:


# Car class should have the following attributes & methods
#
# Old Attributes:
#   color, max_speed, acceleration, tyre_friction, is_engine_started, current_speed
#
# Old Methods:
#   start_engine, stop_engine, accelerate, apply_brakes
# 
# New Methods:
#   sound_horn:
#       - Print "Beep Beep" if car engine is on
#       - Print "Car has not started yet" if car engine is off
#
# When a new car is created, the engine should be off by default and current_speed should be 0


# Implement the Car class appropriately
class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color=color
        self.max_speed=max_speed
        self.acceleration=acceleration
        self.tyre_friction=tyre_friction
        self.is_engine_started=False
        self.current_speed=0

    def start_engine(self):
        self.is_engine_started=True

    def stop_engine(self):
        self.is_engine_started=False

    def accelerate(self):
        if not self.is_engine_started:
            print("Car has not started yet")
        else:
            self.current_speed+=self.acceleration
            if self.current_speed>self.max_speed:
                self.current_speed=self.max_speed

    def apply_brakes(self):
        self.current_speed-=self.tyre_friction
        if self.current_speed<0:
            self.current_speed=0

    def sound_horn(self):
        if self.is_engine_started:
            print("Beep Beep")
        else:
            print("Car has not started yet")


# You need not change any code below.
# Do not call this function anywhere. It will automatically be called internally during tests.
def default_test():
    car = Car(color="Red", max_speed=250, acceleration=10, tyre_friction=3)
    car.sound_horn()  # Calling the accelerate method when the is_engine_started is False
    car.start_engine()  # Starting the engine
    car.sound_horn()  # Calling the accelerate method when the is_engine_started is True
